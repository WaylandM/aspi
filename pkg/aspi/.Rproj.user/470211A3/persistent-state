build-last-errors="[]"
build-last-errors-base-dir="~/Dropbox/bilateral_asymmetry/bilateral_asymmetry_analysis/pkg/aspi/"
build-last-outputs="[{\"output\":\"==> devtools::build(binary = TRUE, args = c('--preclean'))\\n\\n\",\"type\":0},{\"output\":\"'/Library/Frameworks/R.framework/Resources/bin/R' --no-site-file --no-environ  \\\\\\n\",\"type\":1},{\"output\":\"  --no-save --no-restore --quiet CMD INSTALL  \\\\\\n\",\"type\":1},{\"output\":\"  '/Users/matt/Dropbox/bilateral_asymmetry/bilateral_asymmetry_analysis/pkg/aspi'  \\\\\\n\",\"type\":1},{\"output\":\"  --build --preclean \\n\",\"type\":1},{\"output\":\"\\n\",\"type\":1},{\"output\":\"\",\"type\":1},{\"output\":\"* installing to library ‘/private/var/folders/bt/dt9px14x0sg3_wdnf35bn6nc0000gn/T/RtmpUfkSDR/temp_libpath37d87f43a1d1’\\n\",\"type\":1},{\"output\":\"* installing *source* package ‘aspi’ ...\\n\",\"type\":1},{\"output\":\"\",\"type\":1},{\"output\":\"No man pages found in package  ‘aspi’ \\n\",\"type\":1},{\"output\":\"\",\"type\":1},{\"output\":\"** R\\n\",\"type\":1},{\"output\":\"** preparing package for lazy loading\\n\",\"type\":1},{\"output\":\"** help\\n\",\"type\":1},{\"output\":\"*** installing help indices\\n\",\"type\":1},{\"output\":\"** building package indices\\n\",\"type\":1},{\"output\":\"** installing vignettes\\n\",\"type\":1},{\"output\":\"** testing if installed package can be loaded\\n\",\"type\":1},{\"output\":\"\",\"type\":1},{\"output\":\"[1] \\\"/Users/matt/Dropbox/bilateral_asymmetry/bilateral_asymmetry_analysis/pkg/aspi_0.1.tgz\\\"\\n\",\"type\":1},{\"output\":\"\",\"type\":1},{\"output\":\"* creating tarball\\n\",\"type\":1},{\"output\":\"packaged installation of ‘aspi’ as ‘aspi_0.1.tgz’\\n\",\"type\":1},{\"output\":\"* DONE (aspi)\\n\",\"type\":1},{\"output\":\"\",\"type\":1},{\"output\":\"\\nBinary package written to ~/Dropbox/bilateral_asymmetry/bilateral_asymmetry_analysis/pkg\\n\",\"type\":1}]"
compile_pdf_state="{\"errors\":[],\"output\":\"\",\"running\":false,\"tab_visible\":false,\"target_file\":\"\"}"
console_procs="[]"
files.monitored-path=""
find-in-files-state="{\"handle\":\"\",\"input\":\"\",\"path\":\"\",\"regex\":true,\"results\":{\"file\":[],\"line\":[],\"lineValue\":[],\"matchOff\":[],\"matchOn\":[]},\"running\":false}"
imageDirtyState="1"
saveActionState="-1"
